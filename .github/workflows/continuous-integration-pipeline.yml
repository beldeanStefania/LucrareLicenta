name: CI Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: "17"

      - name: Build Backend JAR
        working-directory: ./backend
        run: mvn clean package -DskipTests

      - name: Build Docker Images
        run: docker compose build

      - name: Start Services
        run: docker compose up -d

      - name: Build & Test Spring Boot App
        working-directory: ./backend
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/orar
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        run: mvn clean install

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install and Test React App
        working-directory: ./frontend
        run: |
          npm install
          npm run test -- --watchAll=false

      - name: Tear Down Services
        run: docker compose down

  # integration:
  #   runs-on: ubuntu-latest
  #   needs: build-test
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Build & Start Docker Compose Stack
  #       run: docker-compose up -d --build

  #     - name: Wait for Services to be Ready
  #       run: |
  #         for i in {1..30}; do
  #           if curl -s http://localhost:8080/actuator/health | grep '"status":"UP"'; then
  #             echo "Backend is up!"
  #             break
  #           fi
  #           echo "Waiting for backend to be ready..."
  #           sleep 2
  #         done

  #     - name: Run Integration Tests
  #       run: ./run_integration_tests.sh

  #     - name: Tear Down Docker Compose Stack
  #       run: docker-compose down

  # sonar:
  #   runs-on: ubuntu-latest
  #   needs: build-test
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Run SonarQube Analysis
  #       uses: SonarSource/sonarcloud-github-action@master
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       with:
  #         # Add any necessary configuration options here
  #         organization: your-organization
  #         projectKey: your-project-key

  # image_build_scan_push:
  #   runs-on: ubuntu-latest
  #   needs: build-test
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Build Docker Images via Docker Compose
  #       run: docker-compose build

  #     - name: Scan Images with Trivy
  #       run: |
  #         trivy image my-backend-image:latest
  #         trivy image my-frontend-image:latest

  #     - name: Push Images to Registry
  #       env:
  #         REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
  #         REGISTRY_USER: ${{ secrets.REGISTRY_USER }}
  #         REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  #       run: |
  #         # Example for Docker Hub or any Docker registry
  #         docker login $REGISTRY_URL -u $REGISTRY_USER -p $REGISTRY_PASSWORD
  #         docker tag my-backend-image:latest $REGISTRY_URL/my-backend-image:latest
  #         docker push $REGISTRY_URL/my-backend-image:latest
  #         docker tag my-frontend-image:latest $REGISTRY_URL/my-frontend-image:latest
  #         docker push $REGISTRY_URL/my-frontend-image:latest

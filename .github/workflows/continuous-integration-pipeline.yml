name: CI Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  SQL_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
  GITHUB_REPOSITORY: ${{ vars.GH_REPOSITORY_URL }}

jobs:
  build:
    runs-on: ubuntu-latest
    #   services:
    #     mysql:
    #       image: mysql:8
    #       env:
    #         MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
    #         MYSQL_DATABASE: orar
    #         MYSQL_ROOT_HOST: "%"
    #       ports:
    #         - 3306:3306
    #       options: >-
    #         --health-cmd="mysqladmin ping --silent"
    #         --health-interval=10s
    #         --health-timeout=5s
    #         --health-retries=5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      #     - name: Set up JDK 17
      #       uses: actions/setup-java@v2
      #       with:
      #         distribution: temurin
      #         java-version: "17"

      #     - name: Wait for MySQL
      #       run: |
      #         for i in {1..30}; do
      #           nc -z 127.0.0.1 3306 && echo "MySQL is up" && exit 0
      #           echo "Waiting for MySQL..."
      #           sleep 2
      #         done
      #         echo "MySQL did not become ready in time" && exit 1

      #     - name: Test Spring Boot App
      #       working-directory: ./backend
      #       env:
      #         SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/orar
      #         SPRING_DATASOURCE_USERNAME: root
      #         SPRING_DATASOURCE_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      #       run: mvn clean test

      #     # ----- Frontend Testing -----
      #     - name: Set up Node.js
      #       uses: actions/setup-node@v4
      #       with:
      #         node-version: "20"

      #     - name: Test React App
      #       working-directory: ./frontend
      #       run: |
      #         npm install
      #         npm run test

      # ----- Build and Push Docker Images -----
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username ${{ vars.DOCKERHUB_USERNAME }} --password-stdin

      # Build, tag, and push the backend image
      - name: Build Backend Docker Image
        run: docker build -t lucrarelicenta-backend:latest ./backend

      - name: Tag and Push Backend Image
        run: |
          docker tag lucrarelicenta-backend:latest ${{ vars.DOCKERHUB_USERNAME }}/lucrarelicenta-backend:latest
          docker push ${{ vars.DOCKERHUB_USERNAME }}/lucrarelicenta-backend:latest

      # Build, tag, and push the frontend image
      - name: Build Frontend Docker Image
        run: docker build -t lucrarelicenta-frontend:latest ./frontend

      - name: Tag and Push Frontend Image
        run: |
          docker tag lucrarelicenta-frontend:latest ${{ vars.DOCKERHUB_USERNAME }}/lucrarelicenta-frontend:latest
          docker push ${{ vars.DOCKERHUB_USERNAME }}/lucrarelicenta-frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Ensure Docker and Docker Compose are installed on remote server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY2 }}
          script: |
            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
              echo "Docker is not installed. Installing Docker..."
              sudo apt-get update -y
              sudo apt-get install -y docker.io
            else
              echo "Docker is already installed."
            fi

            # Check if Docker Compose is installed (standalone binary)
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose is not installed. Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo mv /usr/local/bin/docker-compose /usr/bin/docker-compose
              sudo chmod +x /usr/bin/docker-compose
            else
              echo "Docker Compose is already installed."
            fi

      - name: Update repository on remote server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY2 }}
          script: |
            # Use the repository URL directly from your vars
            REPO_URL="${{ vars.GH_REPOSITORY_URL }}"
            HOME_DIR="/home/ubuntu"
            REPO_DIR="$HOME_DIR/LucrareLicenta"
            if [ ! -d "$REPO_DIR" ]; then
              echo "Directory $REPO_DIR does not exist. Cloning repository..."
              cd "$HOME_DIR" || { echo "Failed to change directory to $HOME_DIR"; exit 1; }
              git clone "$REPO_URL" || { echo "Failed to clone repository"; exit 1; }
            else
              echo "Directory $REPO_DIR exists."
            fi
            cd "$REPO_DIR" || { echo "Failed to change directory to $REPO_DIR"; exit 1; }
            if [ ! -d .git ]; then
              echo "Directory $REPO_DIR is not a git repository."
            fi
            echo "Pulling latest changes..."
            git pull origin main || { echo "Failed to pull latest changes"; exit 1; }

      - name: Create .env file for docker-compose
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY2 }}
          script: |
            cd /home/ubuntu/LucrareLicenta || { echo "Failed to change directory"; exit 1; }
            echo "SQL_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" > .env
            echo "REACT_APP_API_BASE_URL=http://${{ vars.EC2_HOST }}:8080" >> .env
            echo ".env file created with SQL_PASSWORD and REACT_APP_API_BASE_URL"


      - name: Prune old Docker images
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY2 }}
          script: |
            echo "Pruning old Docker images..."
            sudo docker image prune -a -f || { echo "Failed to prune Docker images"; exit 1; }

      - name: Pull new Docker images
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY2 }}
          script: |
            cd /home/ubuntu/LucrareLicenta || { echo "Failed to change directory"; exit 1; }
            echo "Pulling new Docker images..."
            sudo docker-compose pull || { echo "Failed to pull new Docker images"; exit 1; }

      - name: Bring down current Docker containers
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY2 }}
          script: |
            cd /home/ubuntu/LucrareLicenta || { echo "Failed to change directory"; exit 1; }
            export SQL_PASSWORD="${{ secrets.MYSQL_ROOT_PASSWORD }}"
            echo "Taking down current Docker containers..."
            sudo docker-compose down || { echo "Failed to bring down Docker containers"; exit 1; }

      - name: Start Docker containers
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY2 }}
          script: |
            cd /home/ubuntu/LucrareLicenta || { echo "Failed to change directory"; exit 1; }
            export SQL_PASSWORD="${{ secrets.MYSQL_ROOT_PASSWORD }}"
            echo "Starting Docker containers..."
            sudo docker-compose up -d || { echo "Failed to start Docker containers"; exit 1; }

name: CI Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: "17"

      - name: Build Backend JAR
        working-directory: ./backend
        run: mvn clean package -DskipTests

      - name: Build Docker Images
        run: docker compose build

      - name: Start Services
        run: docker compose up -d

      - name: Build & Test Spring Boot App
        working-directory: ./backend
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/orar
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        run: mvn clean install

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install and Test React App
        working-directory: ./frontend
        run: |
          npm install
          npm run test

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=beldeanStefania_LucrareLicenta

      - name: Tear Down Services
        run: docker compose down

  # image_build_scan_push:
  #   runs-on: ubuntu-latest
  #   needs: build-test
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Build Docker Images via Docker Compose
  #       run: docker-compose build

  #     - name: Scan Images with Trivy
  #       run: |
  #         trivy image my-backend-image:latest
  #         trivy image my-frontend-image:latest

  #     - name: Push Images to Registry
  #       env:
  #         REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
  #         REGISTRY_USER: ${{ secrets.REGISTRY_USER }}
  #         REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  #       run: |
  #         # Example for Docker Hub or any Docker registry
  #         docker login $REGISTRY_URL -u $REGISTRY_USER -p $REGISTRY_PASSWORD
  #         docker tag my-backend-image:latest $REGISTRY_URL/my-backend-image:latest
  #         docker push $REGISTRY_URL/my-backend-image:latest
  #         docker tag my-frontend-image:latest $REGISTRY_URL/my-frontend-image:latest
  #         docker push $REGISTRY_URL/my-frontend-image:latest
